# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle & S3

on:
  push:
    branches: [ "Action" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  RESOURCE_PATH: ./src/main/resources/application.yaml

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Generate Environment Variables File for Properties
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY }}
          cloud.aws.credentials.secretKey: ${{ secrets.AWS_SECRET_KEY }}
          spring.datasource.url:  ${{ secrets.RDS_URL }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          jwt.secret: ${{ secrets.JWT_SECRET_KEY }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_NAME }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

        # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

        # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      - name: Copy appspec
        run: cp appspec.yml ./deploy/

        # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

        # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: aws s3 cp --region ap-northeast-2 --acl private ./springboot-intro-build.zip s3://${{ secrets.S3_BUCKET_NAME }}/

          # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name blogServer8 \
          --deployment-group-name eight \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=teameightbucket,bundleType=zip,key=springboot-intro-build.zip \
          --region ap-northeast-2


          
  
    
